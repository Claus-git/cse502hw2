vocabulary V {
    type Distance
    type City
    reached: (City) -> Bool
    total: () -> Int
    edge: (City * City) -> Bool
    edgedistance: (City * City * Distance) -> Bool
    next: City -> City
}

structure S : V {
    Distance := {1..10}.
    City := {1..6}.
    Time := {1..6}.
    edge := {
        (1,2), (1,3), (1,4),
        (2,4), (2,5), (2,6),
        (3,1), (3,4), (3,5),
        (4,1), (4,2), (5,3),
        (5,4), (5,6), (6,2),
        (6,3), (6,5)
        }.
    edgedistance := {
        (1,2,2), (1,3,3), (1,4,1),
        (2,4,2), (2,5,2), (2,6,4),
        (3,1,3), (3,4,2), (3,5,2),
        (4,1,1), (4,2,2), (5,3,2),
        (5,4,2), (5,6,1), (6,2,4),
        (6,3,3), (6,5,1)
        }.
}

theory T : V {
    {
        reached(next(1)).
        !c in City: reached(next(c)) <- reached(c).
    }
    !c in City: edge(c, next(c)).
    !c in City: reached(c).

    total() = sum(lambda c in City, d in Distance : if edgedistance(c,next(c),d) then d else 0).
}

procedure main() {
    pretty_print(minimize(T,S,term="total()"))
}