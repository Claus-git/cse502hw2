vocabulary V {
    type Time
    type City
    type Distance
    edge: (City * City * Distance) -> Bool
    step: (City * City * Time) -> Bool
    cost: () -> Int
    distance: (Int * Int) -> Int
}

structure S : V {
    Distance := {1..10}.
    Time := {1..6}.
    City := {1..6}.
    edge := {
        (1,2,2), (1,3,3), (1,4,1),
        (2,4,2), (2,5,2), (2,6,4),
        (3,1,3), (3,4,2), (3,5,2),
        (4,1,1), (4,2,2), (5,3,2),
        (5,4,2), (5,6,1), (6,2,4),
        (6,3,3), (6,5,1)
        }.
}

theory T : V {
    !t in Time : #{x,y : step(x, y, t)} = 1.
    !x,y in City, t in Time : #{a : step(a,x,t-1) & step(x,y,t)} = 1.
    !c in City : #{y,t: step(c,y,t)} = 1.
    !c in City : #{x,t: step(x,c,t)} = 1.
    cost() = sum(lambda t in Time, x,y in City, d in Distance : if step(x,y,t) & edge(x,y,d) then d else 0).
}

procedure main() {
    pretty_print(model_expand(T,S))
}